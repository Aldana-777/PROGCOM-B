{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMt++ENzjVwOSahSUwqEHI8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Aldana-777/PROGCOM-B/blob/main/TRABAJO%20DE%20CARRERA%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "TRABAJO MEJORA DEL TEMA DE LA CARRERA"
      ],
      "metadata": {
        "id": "jEa4PF8IACp8"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l-e2PcdhABCy"
      },
      "outputs": [],
      "source": [
        "import tkinter as tk\n",
        "from tkinter import ttk\n",
        "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.animation as animation\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ---------- Empresas ----------\n",
        "class Empresa:\n",
        "    def __init__(self, nombre, ticker, precio_accion, eps, valor_contable, roe):\n",
        "        self.nombre = nombre\n",
        "        self.ticker = ticker\n",
        "        self.precio_accion = precio_accion\n",
        "        self.eps = eps\n",
        "        self.valor_contable = valor_contable\n",
        "        self.roe = roe\n",
        "\n",
        "    def calcular_pe_ratio(self):\n",
        "        return self.precio_accion / self.eps if self.eps != 0 else 0\n",
        "\n",
        "    def calcular_pb_ratio(self):\n",
        "        return self.precio_accion / self.valor_contable if self.valor_contable != 0 else 0\n",
        "\n",
        "    def calcular_roe_pct(self):\n",
        "        return self.roe * 100\n",
        "\n",
        "# ---------- Interfaz ----------\n",
        "class ValuacionEmpresasApp:\n",
        "    def __init__(self, root):\n",
        "        self.root = root\n",
        "        self.root.title(\"Visualización de Valoración de Empresas - NASDAQ\")\n",
        "        self.root.geometry(\"900x600\")\n",
        "        self.empresas = self.cargar_datos()\n",
        "\n",
        "        self.crear_widgets()\n",
        "        self.anim = None\n",
        "        self.graficar_metrica_animate(\"P/E\")\n",
        "\n",
        "    def cargar_datos(self):\n",
        "        return [\n",
        "            Empresa(\"Apple\", \"AAPL\", 175, 6.5, 4.5, 0.28),\n",
        "            Empresa(\"Microsoft\", \"MSFT\", 320, 9.2, 15.5, 0.35),\n",
        "            Empresa(\"Alphabet\", \"GOOGL\", 135, 5.9, 18.2, 0.17),\n",
        "            Empresa(\"NVIDIA\", \"NVDA\", 460, 12.1, 20.0, 0.45),\n",
        "            Empresa(\"Meta\", \"META\", 295, 10.8, 14.9, 0.31)\n",
        "        ]\n",
        "\n",
        "    def crear_widgets(self):\n",
        "        top_frame = ttk.Frame(self.root)\n",
        "        top_frame.pack(pady=10)\n",
        "\n",
        "        self.combo = ttk.Combobox(top_frame, values=[\"P/E\", \"P/B\", \"ROE (%)\"], state=\"readonly\", width=12)\n",
        "        self.combo.set(\"P/E\")\n",
        "        self.combo.pack(side=tk.LEFT, padx=5)\n",
        "\n",
        "        btn = ttk.Button(top_frame, text=\"Actualizar Gráfico\", command=self.actualizar_grafico)\n",
        "        btn.pack(side=tk.LEFT, padx=5)\n",
        "\n",
        "        plt.style.use('ggplot')  # Alternativas: 'ggplot', 'fivethirtyeight', etc.\n",
        "\n",
        "        self.fig, self.ax = plt.subplots(figsize=(8, 5))\n",
        "        self.canvas = FigureCanvasTkAgg(self.fig, master=self.root)\n",
        "        self.canvas.get_tk_widget().pack()\n",
        "\n",
        "    def actualizar_grafico(self):\n",
        "        metrica = self.combo.get()\n",
        "        if self.anim:\n",
        "            self.anim.event_source.stop()\n",
        "        self.graficar_metrica_animate(metrica)\n",
        "\n",
        "    def graficar_metrica_animate(self, metrica):\n",
        "        self.ax.clear()\n",
        "\n",
        "        nombres = [e.nombre for e in self.empresas]\n",
        "\n",
        "        if metrica == \"P/E\":\n",
        "            valores = [e.calcular_pe_ratio() for e in self.empresas]\n",
        "        elif metrica == \"P/B\":\n",
        "            valores = [e.calcular_pb_ratio() for e in self.empresas]\n",
        "        else:\n",
        "            valores = [e.calcular_roe_pct() for e in self.empresas]\n",
        "\n",
        "        # Ordenar empresas por valor descendente\n",
        "        empresas_ordenadas = sorted(zip(nombres, valores), key=lambda x: x[1], reverse=True)\n",
        "        nombres, valores = zip(*empresas_ordenadas)\n",
        "\n",
        "        # Colores gradientes\n",
        "        colores = plt.cm.viridis(np.linspace(0.2, 0.8, len(valores)))\n",
        "\n",
        "        self.bars = self.ax.bar(nombres, [0]*len(valores), color=colores, edgecolor='black')\n",
        "        self.ax.set_title(f\"Métrica: {metrica}\", fontsize=18, weight='bold')\n",
        "        self.ax.set_ylabel(metrica, fontsize=14)\n",
        "        self.ax.set_ylim(0, max(valores)*1.3)\n",
        "        self.ax.tick_params(axis='x', labelrotation=20, labelsize=10)\n",
        "        self.ax.tick_params(axis='y', labelsize=10)\n",
        "\n",
        "        def animate(frame):\n",
        "            progress = frame / 100\n",
        "            self.ax.clear()\n",
        "            interpolados = [v * progress for v in valores]\n",
        "            self.bars = self.ax.bar(nombres, interpolados, color=colores, edgecolor='black')\n",
        "            self.ax.set_title(f\"Métrica: {metrica}\", fontsize=18, weight='bold')\n",
        "            self.ax.set_ylabel(metrica, fontsize=14)\n",
        "            self.ax.set_ylim(0, max(valores)*1.3)\n",
        "            self.ax.tick_params(axis='x', labelrotation=20, labelsize=10)\n",
        "            self.ax.tick_params(axis='y', labelsize=10)\n",
        "\n",
        "            for bar, val in zip(self.bars, valores):\n",
        "                height = bar.get_height()\n",
        "                self.ax.text(bar.get_x() + bar.get_width()/2, height + 0.5, f\"{val:.2f}\",\n",
        "                             ha='center', va='bottom', fontsize=9, fontweight='bold')\n",
        "\n",
        "        self.anim = animation.FuncAnimation(self.fig, animate, frames=101, interval=15, repeat=False)\n",
        "        self.canvas.draw()\n",
        "\n",
        "# ---------- Ejecución ----------\n",
        "if __name__ == \"__main__\":\n",
        "    root = tk.Tk()\n",
        "    app = ValuacionEmpresasApp(root)\n",
        "    root.mainloop()"
      ]
    }
  ]
}
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPAi6rawbawt1UhV5WHeZ2i",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Aldana-777/PROGCOM-B/blob/main/Mejora.Definitiva.Problema.Carrera\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Código Mejorado de la Carrera"
      ],
      "metadata": {
        "id": "MssORAMR6xJ3"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5oOG5WIO6uyf"
      },
      "outputs": [],
      "source": [
        "import tkinter as tk\n",
        "from tkinter import ttk\n",
        "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.animation as animation\n",
        "\n",
        "class Empresa:\n",
        "    def __init__(self, nombre, ticker, precio_accion, eps, valor_contable, roe):\n",
        "        self.nombre = nombre\n",
        "        self.ticker = ticker\n",
        "        self.precio_accion = precio_accion\n",
        "        self.eps = eps\n",
        "        self.valor_contable = valor_contable\n",
        "        self.roe = roe\n",
        "\n",
        "    def calcular_pe_ratio(self):\n",
        "        return self.precio_accion / self.eps if self.eps else 0\n",
        "\n",
        "    def calcular_pb_ratio(self):\n",
        "        return self.precio_accion / self.valor_contable if self.valor_contable else 0\n",
        "\n",
        "    def calcular_roe_pct(self):\n",
        "        return self.roe * 100\n",
        "\n",
        "class ValuacionEmpresasApp:\n",
        "    def __init__(self, root):\n",
        "        self.root = root\n",
        "        self.root.title(\"Visualización de Valoración de Empresas (NASDAQ)\")\n",
        "        self.root.geometry(\"800x600\")\n",
        "\n",
        "        self.empresas = self.cargar_datos()\n",
        "        self.crear_widgets()\n",
        "        self.anim = None\n",
        "        self.pending_metrica = None\n",
        "        self.metrica_queue = [\"P/E\", \"ROE (%)\", \"P/B\"]\n",
        "        self.mostrar_metrica_encadenada()\n",
        "\n",
        "    def cargar_datos(self):\n",
        "        return [\n",
        "            Empresa(\"Apple Inc.\", \"AAPL\", 175.00, 6.50, 4.50, 0.28),\n",
        "            Empresa(\"Microsoft Corp.\", \"MSFT\", 320.00, 9.20, 15.50, 0.35),\n",
        "            Empresa(\"Alphabet Inc.\", \"GOOGL\", 135.00, 5.90, 18.20, 0.17)\n",
        "        ]\n",
        "\n",
        "    def crear_widgets(self):\n",
        "        frame_top = ttk.Frame(self.root)\n",
        "        frame_top.pack(pady=10)\n",
        "\n",
        "        ttk.Label(frame_top, text=\"Seleccionar Métrica:\").pack(side=tk.LEFT, padx=5)\n",
        "        self.combo = ttk.Combobox(frame_top, values=[\"P/E\", \"P/B\", \"ROE (%)\"], state=\"readonly\", width=10)\n",
        "        self.combo.set(\"P/E\")\n",
        "        self.combo.pack(side=tk.LEFT, padx=5)\n",
        "        self.combo.bind(\"<<ComboboxSelected>>\", lambda e: self.solicitar_cambio_grafico())\n",
        "\n",
        "        self.btn_actualizar = ttk.Button(frame_top, text=\"Actualizar Gráfico\", command=self.solicitar_cambio_grafico)\n",
        "        self.btn_actualizar.pack(side=tk.LEFT, padx=5)\n",
        "\n",
        "        plt.style.use('ggplot')\n",
        "        self.fig, self.ax = plt.subplots(figsize=(8, 6))\n",
        "        self.canvas = FigureCanvasTkAgg(self.fig, master=self.root)\n",
        "        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n",
        "\n",
        "        self.ax.tick_params(axis='x', labelrotation=20, labelsize=12)\n",
        "        self.ax.tick_params(axis='y', labelsize=12)\n",
        "\n",
        "    def solicitar_cambio_grafico(self):\n",
        "        metrica = self.combo.get()\n",
        "        if not metrica:\n",
        "            return\n",
        "        if self.anim:\n",
        "            self.pending_metrica = metrica\n",
        "        else:\n",
        "            self.iniciar_animacion(metrica)\n",
        "\n",
        "    def iniciar_animacion(self, metrica):\n",
        "        if self.anim:\n",
        "            self.anim.event_source.stop()\n",
        "            self.anim = None\n",
        "        if self.pending_metrica == metrica:\n",
        "            self.pending_metrica = None\n",
        "        self.graficar_metrica_animate(metrica)\n",
        "\n",
        "    def graficar_metrica_estatica(self, metrica):\n",
        "        nombres = [e.nombre for e in self.empresas]\n",
        "        if metrica == \"P/E\":\n",
        "            valores = [e.calcular_pe_ratio() for e in self.empresas]\n",
        "            ylabel = \"P/E Ratio\"\n",
        "        elif metrica == \"P/B\":\n",
        "            valores = [e.calcular_pb_ratio() for e in self.empresas]\n",
        "            ylabel = \"P/B Ratio\"\n",
        "        elif metrica == \"ROE (%)\":\n",
        "            valores = [e.calcular_roe_pct() for e in self.empresas]\n",
        "            ylabel = \"ROE (%)\"\n",
        "        else:\n",
        "            return\n",
        "\n",
        "        self.ax.clear()\n",
        "        colores = ['#3498db', '#e67e22', '#2ecc71']\n",
        "        self.ax.bar(nombres, valores, color=colores, edgecolor='black', linewidth=1.5)\n",
        "        self.ax.set_title(f\"Métrica de Valoración: {metrica}\", fontsize=18, weight='bold', pad=20)\n",
        "        self.ax.set_ylabel(ylabel, fontsize=14)\n",
        "        self.ax.set_ylim(0, max(valores) * 1.3 if valores else 1)\n",
        "        self.ax.tick_params(axis='x', labelrotation=20, labelsize=12)\n",
        "        self.ax.tick_params(axis='y', labelsize=12)\n",
        "\n",
        "        offset = max(valores) * 0.02 if valores else 0.02\n",
        "        for bar, val in zip(self.ax.patches, valores):\n",
        "            self.ax.text(bar.get_x() + bar.get_width() / 2, val + offset, f\"{val:.2f}\",\n",
        "                         ha='center', va='bottom', fontsize=12, fontweight='bold', color='black')\n",
        "\n",
        "        self.fig.tight_layout()\n",
        "        self.canvas.draw()\n",
        "\n",
        "    def graficar_metrica_animate(self, metrica):\n",
        "        nombres = [e.nombre for e in self.empresas]\n",
        "        if metrica == \"P/E\":\n",
        "            valores = [e.calcular_pe_ratio() for e in self.empresas]\n",
        "            ylabel = \"P/E Ratio\"\n",
        "        elif metrica == \"P/B\":\n",
        "            valores = [e.calcular_pb_ratio() for e in self.empresas]\n",
        "            ylabel = \"P/B Ratio\"\n",
        "        elif metrica == \"ROE (%)\":\n",
        "            valores = [e.calcular_roe_pct() for e in self.empresas]\n",
        "            ylabel = \"ROE (%)\"\n",
        "        else:\n",
        "            return\n",
        "\n",
        "        self.ax.clear()\n",
        "        max_val = max(valores) * 1.3 if valores else 1\n",
        "        colores = ['#3498db', '#e67e22', '#2ecc71']\n",
        "\n",
        "        def animate(frame):\n",
        "            progress = frame / 100.0\n",
        "            self.ax.clear()\n",
        "            alturas = [val * progress for val in valores]\n",
        "            bars = self.ax.bar(nombres, alturas, color=colores, edgecolor='black', linewidth=1.5)\n",
        "            self.ax.set_title(f\"Métrica de Valoración: {metrica}\", fontsize=18, weight='bold', pad=20)\n",
        "            self.ax.set_ylabel(ylabel, fontsize=14)\n",
        "            self.ax.set_ylim(0, max_val)\n",
        "            self.ax.tick_params(axis='x', labelrotation=20, labelsize=12)\n",
        "            self.ax.tick_params(axis='y', labelsize=12)\n",
        "\n",
        "            offset = max(valores) * 0.02 if valores else 0.02\n",
        "            for bar, val in zip(bars, valores):\n",
        "                self.ax.text(bar.get_x() + bar.get_width() / 2, val + offset, f\"{val:.2f}\",\n",
        "                             ha='center', va='bottom', fontsize=12, fontweight='bold', color='black')\n",
        "\n",
        "            self.fig.tight_layout()\n",
        "            if frame == 100:\n",
        "                self.root.after(100, lambda: self.manejar_fin_animacion(metrica))\n",
        "\n",
        "        self.anim = animation.FuncAnimation(self.fig, animate, frames=101, interval=15, repeat=False, blit=False)\n",
        "        animate(0)\n",
        "        self.canvas.draw()\n",
        "\n",
        "    def manejar_fin_animacion(self, metrica_actual):\n",
        "        self.graficar_metrica_estatica(metrica_actual)\n",
        "        self.anim = None  # ✅ Liberar animación para permitir nuevas\n",
        "\n",
        "        if self.pending_metrica:\n",
        "            pending = self.pending_metrica\n",
        "            self.pending_metrica = None\n",
        "            self.root.after(500, lambda: self.iniciar_animacion(pending))\n",
        "        elif self.metrica_queue:\n",
        "            self.root.after(500, self.mostrar_metrica_encadenada)\n",
        "\n",
        "    def mostrar_metrica_encadenada(self):\n",
        "        if self.metrica_queue:\n",
        "            siguiente = self.metrica_queue.pop(0)\n",
        "            self.iniciar_animacion(siguiente)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    root = tk.Tk()\n",
        "    app = ValuacionEmpresasApp(root)\n",
        "    root.mainloop()"
      ]
    }
  ]
}